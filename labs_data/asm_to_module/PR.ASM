 
 ; Лаб3-версия 00 программа генерации импульсов и мигание светодиодом 
 
.list on                ; эта директива включает листинг(протокол) процесса ассемблирования

;******** именуем константы и внешние выводы 
mTik equ 1000          ; длительность импульса в мкс
mKvoZn equ 2
mPin10ms reg P3.5
;*****************

;***************** это макрос - поименованная группа команд
	; МАКРОСЫ НЕ ДОЛЖНЫ СОДЕРЖАТЬ РУССКИХ КОММЕНТАРИЕВ!!!!!!!!!!!!!
mLoadTimer0 macro mDlitTi
	Clr TF0
	Clr TR0
	Mov TH0, #>(-mDlitTi)
	Mov TL0, #<(-mDlitTi)
	SetB TR0
.endm
;*****************

;***************** ; распределяем ячейки ОЗУ
.ABSOLUTE
.DATA           
.ORG 20h
mFlags ds 2                     ; 2 байта под битовые переменные
mFlagsReady REG mFlags.0
		; Здесь можно определить и другие флажки
mCount10ms ds 1                 ; Счетчик для счета времени по 10 мс
		; Здесь можно определить и другие переменные
mEndVar_BeginStack ds 1         ; Первая ячейка стека
mKodY ds 1			;Одного байта должно хватить, 0...255
mPtrZn ds 1
mBuferInd ds  mKvoZn
;*****************


;************** Векторы прерываний
.RELATIVE
.CODE
.ORG  0
	Jmp mStart
.ORG  3    ; внешнее прерывание 0
	RetI
.ORG  0bh  ; прерывание по таймеру 0
	Jmp mIntT0
.ORG  13h  ; внешнее прерывание 1
	RetI
.ORG  1bh  ; прерывание по таймеру 1
	RetI
.ORG  23h  ; прерывание по последовательному порту
	RetI
;**************

mAccToBCDtoBufInd:
;	Mov B, #100				;Определение числа сотен
;	Div AB			        
;	Mov mBuferInd+2, A	    
	Mov B, #10			    ;Вычисляем десятки
;    Xch A, B			    ;Остаток от сотен в А
    Div AB			        ;Вычисление и
    Mov mBuferInd+1, A	    ;сохранение десятков
    Mov mBuferInd, B		;Остаток - единицы
 Ret



;************** ­ Начало программы
.ORG  30h
mStart:
	Mov SP, #(mEndVar_BeginStack-1)  ; ­ начальный указатель стека
	Mov mCount10ms, #0      ; обнулить счетчик
	Mov TMod, #00010001b    ; таймер 0 на 16 бит 
	mLoadTimer0 mTik
	SetB ET0                ; разрешить прерывание от таймера 0
	SetB EA                 ; разрешить работу контроллера прерываний
	Mov P1, #0

;************** Основной цикл программы
mMainLoop:
; В основном цикле программы можно организовать счет времени
; при помощи переменной Count10ms и управление внешними объектами,
; ­ например,через 1 секунду мигать индикаторами или сдвигать порт Р1
	Mov A, mCount10ms               ; переменная mCount10ms равна 100?
	CJNE A, #100, mMainLoop         ;       (т.е прошла 1 секунда?)
		Inc P1        ; да, инвертируем светодиод и 
		Mov mCount10ms, #0      ;       ­ начинаем счет времени с начала
			; для "Бегушего огонька" нужно использовать макрос mRunFireP1 (вместо Cpl)
			; Для инкремента порта - Inc P1
	Jmp mMainLoop
;**************

;***Индикация знакоместа
mIndZn:
	Mov A, mPtrZn 			;Заносим адрес
	Add A, #mBuferInd		;	очередной цифры
	Mov R0, A				;		в регистр косвенной адресации
	Mov A, @R0 			 	;Код очередной цифры в A
	Swap A					;Объединение информации
	Orl A, mPtrZn 		 	;	с номером знакоместа
	Swap A					;		в старшей тетраде
	Mov P1, A				
	Inc mPtrZn
      Mov A, mPtrZn
      CJNE A, #mKvoZn, Bu 	;Все знакоместа обслужены?
      Mov mPtrZn, #0		;Начнём по новой
Bu:

 Ret

;************** процедура прерывания по переполнению таймера 0
mIntT0:
	Push PSW                ; Сохраняем 
	Push Acc                ;       регисторы.
;	Mov A,P1
;	Call mAccToBCDtoBufInd
;	Call mIndZn
	mLoadTimer0 mTik                ; Перезагружаем таймер
	Cpl mPin10ms
	Inc mCount10ms                  ; счет времени
	Pop Acc                 ; Восстанавливаем регистры 
	Pop PSW                 ;       в обратном порядке
	RetI
;**************


END




